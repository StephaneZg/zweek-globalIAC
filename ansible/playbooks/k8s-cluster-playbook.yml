---

- hosts: k8s
  become: yes
  vars:
    arch_mapping:  # Map ansible architecture {{ ansible_architecture }} names to Docker's architecture names
      x86_64: amd64
      aarch64: arm64

  tasks:
    - name: update APT packages
      apt:
        update_cache: yes

    - name: disable SWAP (Kubeadm requirement)
      shell: |
        swapoff -a

    - name: disable SWAP in fstab (Kubeadm requirement)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: create an empty file for the Containerd module
      copy:
        content: ""
        dest: /etc/modules-load.d/containerd.conf
        force: no

    - name: configure modules for Containerd
      blockinfile:
        path: /etc/modules-load.d/containerd.conf
        block: |
              overlay
              br_netfilter

    - name: create an empty file for Kubernetes sysctl params
      copy:
        content: ""
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        force: no

    - name: configure sysctl params for Kubernetes
      lineinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        line: "{{ item }}"
      with_items:
        - 'net.bridge.bridge-nf-call-iptables  = 1'
        - 'net.ipv4.ip_forward                 = 1'
        - 'net.bridge.bridge-nf-call-ip6tables = 1'

    - name: apply sysctl params without reboot
      command: sysctl --system

    - name: install APT Transport HTTPS
      apt:
        name: apt-transport-https
        state: present

    - name: add Docker apt-key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: add Docker's APT repository
      apt_repository:
        repo: "deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        filename: "docker-{{ ansible_distribution_release }}"

    - name: add Kubernetes apt-key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: add Kubernetes' APT repository
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: 'kubernetes'

    - name: install Containerd
      apt:
        name: containerd.io
        state: present

    - name: create Containerd directory
      file:
        path: /etc/containerd
        state: directory

    - name: add Containerd configuration
      shell: /usr/bin/containerd config default > /etc/containerd/config.toml

    - name: configuring the systemd cgroup driver for Containerd
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '            SystemdCgroup = false'
        line: '            SystemdCgroup = true'

    - name: enable the Containerd service and start it
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon-reload: yes

    - name: install Kubelet
      apt:
        name: kubelet=1.28.*
        state: present
        update_cache: true

    - name: install Kubeadm
      apt:
        name: kubeadm=1.28.*
        state: present

    - name: enable the Kubelet service, and enable it persistently
      service:
        name: kubelet
        enabled: yes

    - name: load br_netfilter kernel module
      modprobe:
        name: br_netfilter
        state: present

    - name: set bridge-nf-call-iptables
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1

    - name: set ip_forward
      sysctl:
        name: net.ipv4.ip_forward
        value: 1

    - name: add node exporter user
      ansible.builtin.user:
        name: node_exporter
        system: true
        shell: /bin/false

    - name: Download node exporter
      ansible.builtin.shell:
        cmd: wget https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-amd64.tar.gz

    - name: Untar node exporter package
      ansible.builtin.shell:
        cmd: tar -xvf node_exporter-1.7.0.linux-amd64.tar.gz
    
    - name: Move node exporter to /usr/local/bin
      ansible.builtin.copy: 
        remote_src: true
        src:  /home/ubuntu/node_exporter-1.7.0.linux-amd64/node_exporter
        dest: /usr/local/bin/
        mode: 0755

    - name: create emtpy node exporter service file
      ansible.builtin.copy:
        content: ""
        dest: /etc/systemd/system/node_exporter.service
        owner: node_exporter

    - name: Add node exporter services
      ansible.builtin.blockinfile:
        path: /etc/systemd/system/node_exporter.service
        block: |
          [Unit]
          Description=Node Exporter
          Wants=network-online.target
          After=network-online.target
          StartLimitIntervalSec=500
          StartLimitBurst=5
          [Service]
          User=node_exporter
          Group=node_exporter
          Type=simple
          Restart=on-failure
          RestartSec=5s
          ExecStart=/usr/local/bin/node_exporter \
          --collector.logind
          [Install]
          WantedBy=multi-user.target

    - name: Enable and start Node Exporter services
      ansible.builtin.systemd:
        name: node_exporter
        enabled: true
        state: started

    - name: reboot and wait for reboot to complete
      reboot:

    - name: Stop ufw service
      ansible.builtin.systemd:
        name: ufw
        state: stopped

  handlers:
    - name: update_server_packages
      ansible.builtin.apt:
        update_cache: true

- hosts: k8s-masters
  become: yes 
  tasks: 
    - name: install kubectl
      become: yes
      apt:
        name: kubectl=1.28.*
        state: present
        force: yes 

    - name: create an empty file for Kubeadm configuring
      copy:
        content: ""
        dest: /etc/kubernetes/kubeadm-config.yaml
        force: no

    - name: configuring the container runtime including its cgroup driver
      blockinfile:
        path: /etc/kubernetes/kubeadm-config.yaml
        block: |
              kind: ClusterConfiguration
              apiVersion: kubeadm.k8s.io/v1beta3
              networking:
                podSubnet: "10.244.0.0/16"
              ---
              kind: KubeletConfiguration
              apiVersion: kubelet.config.k8s.io/v1beta1
              runtimeRequestTimeout: "15m"
              cgroupDriver: "systemd"
              systemReserved:
                cpu: 100m
                memory: 350M
              kubeReserved:
                cpu: 100m
                memory: 50M
              enforceNodeAllocatable:
              - pods

    - name: initialize the cluster (this could take some time)
      shell: kubeadm init --config /etc/kubernetes/kubeadm-config.yaml >> cluster_initialized.log
      args:
        chdir: /home/ubuntu
        creates: cluster_initialized.log

    - name: create .kube directory
      become: true
      become_user: ubuntu
      file:
        path: $HOME/.kube
        state: directory
        mode: 0700

    - name: copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu

    - name: install Pod network
      become: true
      become_user: ubuntu
      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml >> pod_network_setup.log
      args:
        chdir: $HOME
        creates: pod_network_setup.log

    - name: get join command
      shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: set join command
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"
    
    - name: Install nginx
      ansible.builtin.apt:
        name:
          - nginx
        state: present

    - name: Remove default config
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Load nginx configuration
      ansible.builtin.copy:
        content: "{{ lookup('file', '../files/kube-cluster-nginx.conf') }}"
        dest: /etc/nginx/sites-enabled/kube-cluster-nginx.conf

    - name: Enable and start nginx service
      ansible.builtin.systemd:
        name: nginx
        enabled: true
        state: started

    - name: Download Velero packages
      ansible.builtin.shell:
        cmd: curl -fsSL -o velero-v1.12.3-linux-amd64.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.12.3/velero-v1.12.3-linux-amd64.tar.gz

    - name: Untar velero package file
      ansible.builtin.shell:
        cmd: tar -xvf velero-v1.12.3-linux-amd64.tar.gz

    - name: install Velero
      ansible.builtin.shell:
        cmd: | 
          /home/ubuntu/velero-v1.12.3-linux-amd64/velero install \
            --use-volume-snapshots=true \
            --provider aws \
            --bucket {{ hostvars['master'].velero_backup_bucket }} \
            --backup-location-config region={{ hostvars['master'].velero_backup_region }} \
            --snapshot-location-config region={{ hostvars['master'].velero_backup_region }}  \
            --plugins velero/velero-plugin-for-aws:v1.8.2 \
            --kubeconfig /home/ubuntu/.kube/config \
            --no-secret

- hosts: k8s-workers
  become: yes 
  tasks:
    - name: TCP port 6443 on master is reachable from worker
      wait_for: "host={{ hostvars['master'].ansible_private_ipv4 }} port=6443 timeout=5"

    - name: join cluster
      become: true
      shell: "{{ hostvars['master'].join_command }} >> node_joined.log"
      args:
        chdir: /home/ubuntu
        creates: node_joined.log
  


